// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/lottery/lottery.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LotteryServiceClient is the client API for LotteryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LotteryServiceClient interface {
	EnterLottery(ctx context.Context, in *LotteryRequest, opts ...grpc.CallOption) (*LotteryResponse, error)
}

type lotteryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLotteryServiceClient(cc grpc.ClientConnInterface) LotteryServiceClient {
	return &lotteryServiceClient{cc}
}

func (c *lotteryServiceClient) EnterLottery(ctx context.Context, in *LotteryRequest, opts ...grpc.CallOption) (*LotteryResponse, error) {
	out := new(LotteryResponse)
	err := c.cc.Invoke(ctx, "/lottery.LotteryService/EnterLottery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LotteryServiceServer is the server API for LotteryService service.
// All implementations must embed UnimplementedLotteryServiceServer
// for forward compatibility
type LotteryServiceServer interface {
	EnterLottery(context.Context, *LotteryRequest) (*LotteryResponse, error)
	mustEmbedUnimplementedLotteryServiceServer()
}

// UnimplementedLotteryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLotteryServiceServer struct {
}

func (UnimplementedLotteryServiceServer) EnterLottery(context.Context, *LotteryRequest) (*LotteryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterLottery not implemented")
}
func (UnimplementedLotteryServiceServer) mustEmbedUnimplementedLotteryServiceServer() {}

// UnsafeLotteryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LotteryServiceServer will
// result in compilation errors.
type UnsafeLotteryServiceServer interface {
	mustEmbedUnimplementedLotteryServiceServer()
}

func RegisterLotteryServiceServer(s grpc.ServiceRegistrar, srv LotteryServiceServer) {
	s.RegisterService(&LotteryService_ServiceDesc, srv)
}

func _LotteryService_EnterLottery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LotteryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryServiceServer).EnterLottery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lottery.LotteryService/EnterLottery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryServiceServer).EnterLottery(ctx, req.(*LotteryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LotteryService_ServiceDesc is the grpc.ServiceDesc for LotteryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LotteryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lottery.LotteryService",
	HandlerType: (*LotteryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnterLottery",
			Handler:    _LotteryService_EnterLottery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/lottery/lottery.proto",
}
